// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import "github.com/speedyhoon/jay"

func (m Message) MarshalJ() (b []byte) {
	l0 := len(m.Data)
	b = make([]byte, 2+l0)
	b[0] = byte(l0)
	b[1] = m.Type
	if l0 != 0 {
		copy(b[2:], m.Data)
	}
	return
}

func (m *Message) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 2 {
		return jay.ErrUnexpectedEOB
	}
	l0 := int(b[0])
	if l < 2+l0 {
		return jay.ErrUnexpectedEOB
	}
	m.Type = b[1]
	if l0 != 0 {
		m.Data = b[2:]
	}
	return nil
}

func (c Car) MarshalJ() (b []byte) {
	l0, l1 := len(c.Make), len(c.Model)
	b = make([]byte, 4+l0+l1)
	b[0], b[1] = byte(l0), byte(l1)
	jay.WriteUint16(b[2:4], c.Year)
	at, end := 4, 4+l0
	copy(b[at:end], c.Make)
	copy(b[end:], c.Model)
	return
}

func (c *Car) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 4 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1 := int(b[0]), int(b[1])
	if l < 4+l0+l1 {
		return jay.ErrUnexpectedEOB
	}
	c.Year = jay.ReadUint16(b[2:4])
	at, end := 4, 4+l0
	c.Make = string(b[at:end])
	c.Model = string(b[end:])
	return nil
}

func (p Pet) MarshalJ() (b []byte) {
	l0, l1, l2 := len(p.Name), len(p.Species), len(p.Breed)
	b = make([]byte, 3+l0+l1+l2)
	b[0], b[1], b[2] = byte(l0), byte(l1), byte(l2)
	at, end := 3, 3+l0
	copy(b[at:end], p.Name)
	at, end = end, end+l1
	copy(b[at:end], p.Species)
	copy(b[end:], p.Breed)
	return
}

func (p *Pet) UnmarshalJ(b []byte) error {
	l := len(b)
	if l < 3 {
		return jay.ErrUnexpectedEOB
	}
	l0, l1, l2 := int(b[0]), int(b[1]), int(b[2])
	if l < 3+l0+l1+l2 {
		return jay.ErrUnexpectedEOB
	}
	at, end := 3, 3+l0
	p.Name = string(b[at:end])
	at, end = end, end+l1
	p.Species = string(b[at:end])
	p.Breed = string(b[end:])
	return nil
}
