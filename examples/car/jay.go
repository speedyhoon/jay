// Code generated by Jay; DO NOT EDIT.
package main

import (
	"github.com/speedyhoon/jay"
)

func (c *Car) MarshalK() (b []byte) {
	l1, l2, l3 := len(c.Name)+1, len(c.CC)+1, len(c.Timing)+1
	l4 := jay.LenUint(c.Row)
	//b = make([]byte, 21 + l1+l2+l3+int(l4))
	b = make([]byte, 9+l1+l2+l3+int(l4))
	//l3 = 1 + 8 + 9 + l1+1 + l2+1 + l3+1
	b[0] = jay.Bool1(c.Auto)
	jay.WriteUint64(b[1:9], c.ID)
	at := int(9 + l4)
	//jay.WriteUint(b[9:at], c.Row, l4)
	jay.WriteUintArch64(b[9:17], c.Row)

	///*at +=*/ jay.WriteStringX(b[at:at+l1], c.Name, l1)
	//at += l1
	///*at +=*/ jay.WriteStringX(b[at:at+l2], c.CC, l2)
	//at += l2+1

	b[at] = byte(l1)
	at++
	if l1 != 0 {
		copy(b[at:at+l1], c.Name)
	}
	at += l1 - 1

	b[at] = byte(l2)
	at++
	if l2 != 0 {
		copy(b[at:at+l2], c.CC)
	}
	at += l2 - 1
	//jay.WriteStringX(b[at:at+l2], c.CC, l2)

	b[at] = byte(l3)
	at++
	if l3 != 0 {
		//	copy(b[at:at+l3], c.Timing)
		copy(b[at:], c.Timing)
	}
	//jay.WriteStringX(b[at:], c.Timing, l3)

	return
}

func (c *Car) MarshalL() (b []byte) {
	l1, l2, l3 := len(c.Name)+1, len(c.CC)+1, len(c.Timing)+1
	//l4 := jay.LenUint(c.Row)
	//b = make([]byte, 21 + l1+l2+l3+int(l4))
	b = make([]byte, 17+l1+l2+l3) //+int(l4))
	//l3 = 1 + 8 + 9 + l1+1 + l2+1 + l3+1
	b[0] = jay.Bool1(c.Auto)
	//jay.WriteUint64(b[1:9], c.ID)
	//at := int(9+l4)
	//at := 17
	//jay.WriteUintBytesXX(b[9:at], c.Row)

	b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8] = byte(c.ID), byte(c.ID>>8), byte(c.ID>>16), byte(c.ID>>24), byte(c.ID>>32), byte(c.ID>>40), byte(c.ID>>48), byte(c.ID>>56)
	//b[1] = byte(c.ID)
	//b[2] = byte(c.ID >> 8)
	//b[3] = byte(c.ID >> 16)
	//b[4] = byte(c.ID >> 24)
	//b[5] = byte(c.ID >> 32)
	//b[6] = byte(c.ID >> 40)
	//b[7] = byte(c.ID >> 48)
	//b[8] = byte(c.ID >> 56)

	//b[9], b[10], b[11], b[12], b[13], b[14], b[15], b[16] = byte(c.Row), byte(c.Row>>8), byte(c.Row>>16), byte(c.Row>>24), byte(c.Row>>32), byte(c.Row>>40), byte(c.Row>>48), byte(c.Row>>56)

	//b[9] = byte(c.Row)
	//b[10] = byte(c.Row >> 8)
	//b[11] = byte(c.Row >> 16)
	//b[12] = byte(c.Row >> 24)
	//b[13] = byte(c.Row >> 32)
	//b[14] = byte(c.Row >> 40)
	//b[15] = byte(c.Row >> 48)
	//b[16] = byte(c.Row >> 56)

	///*at +=*/ jay.WriteStringX(b[at:at+l1], c.Name, l1)
	//at += l1
	///*at +=*/ jay.WriteStringX(b[at:at+l2], c.CC, l2)
	//at += l2+1

	b[17] = byte(l1)
	//at++
	if l1 != 0 {
		copy(b[18:18+l1], c.Name)
	}
	at := 18 + l1 - 1

	b[at] = byte(l2)
	at++
	if l2 != 0 {
		copy(b[at:at+l2], c.CC)
	}
	at += l2 - 1
	//jay.WriteStringX(b[at:at+l2], c.CC, l2)

	b[at] = byte(l3)
	at++
	if l3 != 0 {
		//	copy(b[at:at+l3], c.Timing)
		copy(b[at:], c.Timing)
	}
	//jay.WriteStringX(b[at:], c.Timing, l3)

	return
}

func (c *Car) MarshalJ() (b []byte) {
	b = make([]byte, c.SizeJ())
	c.MarshalJTo(b)
	return b
}

func (c *Car) MarshalJX() []byte {
	l0, l1, l2 := len(c.Name), len(c.CC), len(c.Timing)

	b := make([]byte, 22+l0+l1+l2+c.Gearbox.SizeJ())
	b[0] = jay.Bool1(c.Auto)
	jay.WriteUint64(b[1:9], c.ID)
	jay.WriteUintArch64(b[9:17], c.Row)
	jay.WriteUint16(b[17:19], c.RedLine)
	at := jay.WriteStringN(b[19:], c.Name, l0, 19)
	at = jay.WriteStringN(b[at:], c.CC, l1, at)
	at = jay.WriteStringN(b[at:], c.Timing, l2, at)
	c.Gearbox.MarshalJTo(b[at:])
	return b
}

func (c *Car) MarshalJY() []byte {
	l0, l1, l2, l3, l4 := len(c.Name), len(c.CC), len(c.Timing), len(c.Gearbox.Model), len(c.Gearbox.Manufacturer)

	b := make([]byte, 24+l0+l1+l2+l3+l4+c.Gearbox.SizeJ())
	b[0] = jay.Bool3(c.Auto, c.Gearbox.Sequential, c.Gearbox.Automatic)
	b[1] = c.Gearbox.Reverse
	b[2] = byte(c.Gearbox.LinkageDelta)

	jay.WriteUint64(b[3:11], c.ID)
	jay.WriteUintArch64(b[11:19], c.Row)
	jay.WriteIntArch64(b[19:27], c.Gearbox.Gears)
	jay.WriteUint16(b[27:29], c.RedLine)

	at := jay.WriteStringN(b[29:], c.Name, l0, 19)
	at = jay.WriteStringN(b[at:], c.CC, l1, at)
	at = jay.WriteStringN(b[at:], c.Timing, l2, at)
	at = jay.WriteStringN(b[at:], c.Gearbox.Model, l3, at)
	jay.WriteStringN(b[at:], c.Gearbox.Manufacturer, l4, at)
	return b
}

func (c *Car) MarshalJTo(b []byte) {
	l0, l1, l2 := len(c.Name), len(c.CC), len(c.Timing)
	b[0] = jay.Bool1(c.Auto)
	jay.WriteUint64(b[1:9], c.ID)
	jay.WriteUintArch64(b[9:17], c.Row)
	jay.WriteUint16(b[17:19], c.RedLine)
	at := jay.WriteStringN(b[19:], c.Name, l0, 19)
	at = jay.WriteStringN(b[at:], c.CC, l1, at)
	at = jay.WriteStringN(b[at:], c.Timing, l2, at)
	c.Gearbox.MarshalJTo(b[at:])
}

func (c *Car) SizeJ() int {
	return 22 + len(c.Name) + len(c.CC) + len(c.Timing) + c.Gearbox.SizeJ()
}

func (c *Car) UnmarshalJ(b []byte) (err error) {
	return nil
}

func (g *Gearbox) MarshalJ() (b []byte) {
	b = make([]byte, g.SizeJ())
	g.MarshalJTo(b)
	return b
}

func (g *Gearbox) MarshalJX() {
	l0, l1 := len(g.Model), len(g.Manufacturer)

	b := make([]byte, 12+l0+l1)
	b[0] = jay.Bool2(g.Sequential, g.Automatic)
	jay.WriteIntArch64(b[1:9], g.Gears)
	b[9] = g.Reverse
	b[10] = byte(g.LinkageDelta)
	at := jay.WriteStringN(b[11:], g.Model, l0, 11)
	jay.WriteStringN(b[at:], g.Manufacturer, l1, at)
}

func (g *Gearbox) MarshalJTo(b []byte) {
	l0, l1 := len(g.Model), len(g.Manufacturer)
	b[0] = jay.Bool2(g.Sequential, g.Automatic)
	jay.WriteIntArch64(b[1:9], g.Gears)
	b[9] = g.Reverse
	b[10] = byte(g.LinkageDelta)
	at := jay.WriteStringN(b[11:], g.Model, l0, 11)
	jay.WriteStringN(b[at:], g.Manufacturer, l1, at)
}

func (g *Gearbox) SizeJ() int {
	return 13 + len(g.Model) + len(g.Manufacturer)
}

func (g *Gearbox) UnmarshalJ(b []byte) (err error) {
	return nil
}
