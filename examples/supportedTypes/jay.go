// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import "github.com/speedyhoon/jay"

func (s *Supported) MarshalJ() (b []byte) {
	l0 := len(s.String)
	b = make([]byte, 239+l0)
	b[0] = jay.Bool3(s.Bool, s.Embed.Bool, s.SubStruct.Bool)
	b[1] = s.Byte
	jay.WriteFloat32(b[2:6], s.Float32)
	jay.WriteFloat64(b[6:14], s.Float64)
	jay.WriteIntArch64(b[14:22], s.Int)
	b[22] = byte(s.Int8)
	jay.WriteInt16(b[23:25], s.Int16)
	jay.WriteInt32(b[25:29], s.Int32)
	jay.WriteInt64(b[29:37], s.Int64)
	jay.WriteUintArch64(b[37:45], s.Uint)
	b[45] = s.Uint8
	jay.WriteUint16(b[46:48], s.Uint16)
	jay.WriteUint32(b[48:52], s.Uint32)
	jay.WriteUint64(b[52:60], s.Uint64)
	jay.WriteInt32(b[60:64], s.Rune)
	jay.WriteTime(b[64:72], s.Time)
	jay.WriteTimeNano(b[72:80], s.Nano)
	b[80] = s.Embed.Byte
	jay.WriteFloat32(b[81:85], s.Embed.Float32)
	jay.WriteFloat64(b[85:93], s.Embed.Float64)
	jay.WriteIntArch64(b[93:101], s.Embed.Int)
	b[101] = byte(s.Embed.Int8)
	jay.WriteInt16(b[102:104], s.Embed.Int16)
	jay.WriteInt32(b[104:108], s.Embed.Int32)
	jay.WriteInt64(b[108:116], s.Embed.Int64)
	jay.WriteUintArch64(b[116:124], s.Embed.Uint)
	b[124] = s.Embed.Uint8
	jay.WriteUint16(b[125:127], s.Embed.Uint16)
	jay.WriteUint32(b[127:131], s.Embed.Uint32)
	jay.WriteUint64(b[131:139], s.Embed.Uint64)
	jay.WriteInt32(b[139:143], s.Embed.Rune)
	jay.WriteTime(b[143:151], s.Embed.Time)
	jay.WriteTimeNano(b[151:159], s.Embed.Nano)
	b[159] = s.SubStruct.Byte
	jay.WriteFloat32(b[160:164], s.SubStruct.Float32)
	jay.WriteFloat64(b[164:172], s.SubStruct.Float64)
	jay.WriteIntArch64(b[172:180], s.SubStruct.Int)
	b[180] = byte(s.SubStruct.Int8)
	jay.WriteInt16(b[181:183], s.SubStruct.Int16)
	jay.WriteInt32(b[183:187], s.SubStruct.Int32)
	jay.WriteInt64(b[187:195], s.SubStruct.Int64)
	jay.WriteUintArch64(b[195:203], s.SubStruct.Uint)
	b[203] = s.SubStruct.Uint8
	jay.WriteUint16(b[204:206], s.SubStruct.Uint16)
	jay.WriteUint32(b[206:210], s.SubStruct.Uint32)
	jay.WriteUint64(b[210:218], s.SubStruct.Uint64)
	jay.WriteInt32(b[218:222], s.SubStruct.Rune)
	jay.WriteTime(b[222:230], s.SubStruct.Time)
	jay.WriteTimeNano(b[230:238], s.SubStruct.Nano)
	jay.WriteString(b[238:], s.String, l0)
	return
}

func (s *Supported) UnmarshalJ(b []byte) error {
	s.Bool, s.Embed.Bool, s.SubStruct.Bool = jay.ReadBool3(b[0])
	s.Byte = b[1]
	s.Float32 = jay.ReadFloat32(b[2:6])
	s.Float64 = jay.ReadFloat64(b[6:14])
	s.Int = jay.ReadIntArch64(b[14:22])
	s.Int8 = int8(b[22])
	s.Int16 = jay.ReadInt16(b[23:25])
	s.Int32 = jay.ReadInt32(b[25:29])
	s.Int64 = jay.ReadInt64(b[29:37])
	s.Uint = jay.ReadUintArch64(b[37:45])
	s.Uint8 = b[45]
	s.Uint16 = jay.ReadUint16(b[46:48])
	s.Uint32 = jay.ReadUint32(b[48:52])
	s.Uint64 = jay.ReadUint64(b[52:60])
	s.Rune = jay.ReadInt32(b[60:64])
	s.Time = jay.ReadTime(b[64:72])
	s.Nano = jay.ReadTimeNano(b[72:80])
	s.Embed.Byte = b[80]
	s.Embed.Float32 = jay.ReadFloat32(b[81:85])
	s.Embed.Float64 = jay.ReadFloat64(b[85:93])
	s.Embed.Int = jay.ReadIntArch64(b[93:101])
	s.Embed.Int8 = int8(b[101])
	s.Embed.Int16 = jay.ReadInt16(b[102:104])
	s.Embed.Int32 = jay.ReadInt32(b[104:108])
	s.Embed.Int64 = jay.ReadInt64(b[108:116])
	s.Embed.Uint = jay.ReadUintArch64(b[116:124])
	s.Embed.Uint8 = b[124]
	s.Embed.Uint16 = jay.ReadUint16(b[125:127])
	s.Embed.Uint32 = jay.ReadUint32(b[127:131])
	s.Embed.Uint64 = jay.ReadUint64(b[131:139])
	s.Embed.Rune = jay.ReadInt32(b[139:143])
	s.Embed.Time = jay.ReadTime(b[143:151])
	s.Embed.Nano = jay.ReadTimeNano(b[151:159])
	s.SubStruct.Byte = b[159]
	s.SubStruct.Float32 = jay.ReadFloat32(b[160:164])
	s.SubStruct.Float64 = jay.ReadFloat64(b[164:172])
	s.SubStruct.Int = jay.ReadIntArch64(b[172:180])
	s.SubStruct.Int8 = int8(b[180])
	s.SubStruct.Int16 = jay.ReadInt16(b[181:183])
	s.SubStruct.Int32 = jay.ReadInt32(b[183:187])
	s.SubStruct.Int64 = jay.ReadInt64(b[187:195])
	s.SubStruct.Uint = jay.ReadUintArch64(b[195:203])
	s.SubStruct.Uint8 = b[203]
	s.SubStruct.Uint16 = jay.ReadUint16(b[204:206])
	s.SubStruct.Uint32 = jay.ReadUint32(b[206:210])
	s.SubStruct.Uint64 = jay.ReadUint64(b[210:218])
	s.SubStruct.Rune = jay.ReadInt32(b[218:222])
	s.SubStruct.Time = jay.ReadTime(b[222:230])
	s.SubStruct.Nano = jay.ReadTimeNano(b[230:238])
	return jay.ReadStringPtrErr(b[1:], &s.String)
}

func (e *Embed) MarshalJ() (b []byte) {
	b = make([]byte, 80)
	b[0] = jay.Bool1(e.Bool)
	b[1] = e.Byte
	jay.WriteFloat32(b[2:6], e.Float32)
	jay.WriteFloat64(b[6:14], e.Float64)
	jay.WriteIntArch64(b[14:22], e.Int)
	b[22] = byte(e.Int8)
	jay.WriteInt16(b[23:25], e.Int16)
	jay.WriteInt32(b[25:29], e.Int32)
	jay.WriteInt64(b[29:37], e.Int64)
	jay.WriteUintArch64(b[37:45], e.Uint)
	b[45] = e.Uint8
	jay.WriteUint16(b[46:48], e.Uint16)
	jay.WriteUint32(b[48:52], e.Uint32)
	jay.WriteUint64(b[52:60], e.Uint64)
	jay.WriteInt32(b[60:64], e.Rune)
	jay.WriteTime(b[64:72], e.Time)
	jay.WriteTimeNano(b[72:80], e.Nano)
	return
}

func (e *Embed) UnmarshalJ(b []byte) error {
	e.Bool = jay.ReadBool1(b[0])
	e.Byte = b[1]
	e.Float32 = jay.ReadFloat32(b[2:6])
	e.Float64 = jay.ReadFloat64(b[6:14])
	e.Int = jay.ReadIntArch64(b[14:22])
	e.Int8 = int8(b[22])
	e.Int16 = jay.ReadInt16(b[23:25])
	e.Int32 = jay.ReadInt32(b[25:29])
	e.Int64 = jay.ReadInt64(b[29:37])
	e.Uint = jay.ReadUintArch64(b[37:45])
	e.Uint8 = b[45]
	e.Uint16 = jay.ReadUint16(b[46:48])
	e.Uint32 = jay.ReadUint32(b[48:52])
	e.Uint64 = jay.ReadUint64(b[52:60])
	e.Rune = jay.ReadInt32(b[60:64])
	e.Time = jay.ReadTime(b[64:72])
	e.Nano = jay.ReadTimeNano(b[72:80])

	return nil
}
