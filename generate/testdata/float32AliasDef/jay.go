// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import "github.com/speedyhoon/jay"

func (o *One) MarshalJ() (b []byte) {
	b = make([]byte, 4)
	jay.WriteFloat32(b, float32(o.One))
	return
}

func (o *One) UnmarshalJ(b []byte) error {
	if len(b) < 4 {
		return jay.ErrUnexpectedEOB
	}
	o.One = float(jay.ReadFloat32(b))
	return nil
}

func (t *Two) MarshalJ() (b []byte) {
	b = make([]byte, 8)
	jay.WriteFloat32(b[:4], float32(t.One))
	jay.WriteFloat32(b[4:], float32(t.Two))
	return
}

func (t *Two) UnmarshalJ(b []byte) error {
	if len(b) < 8 {
		return jay.ErrUnexpectedEOB
	}
	t.One = float(jay.ReadFloat32(b[:4]))
	t.Two = float(jay.ReadFloat32(b[4:]))
	return nil
}

func (t *Three) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat32(b[:4], float32(t.One))
	jay.WriteFloat32(b[4:8], float32(t.Two))
	jay.WriteFloat32(b[8:], float32(t.Three))
	return
}

func (t *Three) UnmarshalJ(b []byte) error {
	if len(b) < 12 {
		return jay.ErrUnexpectedEOB
	}
	t.One = float(jay.ReadFloat32(b[:4]))
	t.Two = float(jay.ReadFloat32(b[4:8]))
	t.Three = float(jay.ReadFloat32(b[8:]))
	return nil
}

func (f *Four) MarshalJ() (b []byte) {
	b = make([]byte, 16)
	jay.WriteFloat32(b[:4], float32(f.One))
	jay.WriteFloat32(b[4:8], float32(f.Two))
	jay.WriteFloat32(b[8:12], float32(f.Three))
	jay.WriteFloat32(b[12:], float32(f.Four))
	return
}

func (f *Four) UnmarshalJ(b []byte) error {
	if len(b) < 16 {
		return jay.ErrUnexpectedEOB
	}
	f.One = float(jay.ReadFloat32(b[:4]))
	f.Two = float(jay.ReadFloat32(b[4:8]))
	f.Three = float(jay.ReadFloat32(b[8:12]))
	f.Four = float(jay.ReadFloat32(b[12:]))
	return nil
}

func (f *Five) MarshalJ() (b []byte) {
	b = make([]byte, 20)
	jay.WriteFloat32(b[:4], float32(f.One))
	jay.WriteFloat32(b[4:8], float32(f.Two))
	jay.WriteFloat32(b[8:12], float32(f.Three))
	jay.WriteFloat32(b[12:16], float32(f.Four))
	jay.WriteFloat32(b[16:], float32(f.Five))
	return
}

func (f *Five) UnmarshalJ(b []byte) error {
	if len(b) < 20 {
		return jay.ErrUnexpectedEOB
	}
	f.One = float(jay.ReadFloat32(b[:4]))
	f.Two = float(jay.ReadFloat32(b[4:8]))
	f.Three = float(jay.ReadFloat32(b[8:12]))
	f.Four = float(jay.ReadFloat32(b[12:16]))
	f.Five = float(jay.ReadFloat32(b[16:]))
	return nil
}

func (s *Six) MarshalJ() (b []byte) {
	b = make([]byte, 24)
	jay.WriteFloat32(b[:4], float32(s.One))
	jay.WriteFloat32(b[4:8], float32(s.Two))
	jay.WriteFloat32(b[8:12], float32(s.Three))
	jay.WriteFloat32(b[12:16], float32(s.Four))
	jay.WriteFloat32(b[16:20], float32(s.Five))
	jay.WriteFloat32(b[20:], float32(s.Six))
	return
}

func (s *Six) UnmarshalJ(b []byte) error {
	if len(b) < 24 {
		return jay.ErrUnexpectedEOB
	}
	s.One = float(jay.ReadFloat32(b[:4]))
	s.Two = float(jay.ReadFloat32(b[4:8]))
	s.Three = float(jay.ReadFloat32(b[8:12]))
	s.Four = float(jay.ReadFloat32(b[12:16]))
	s.Five = float(jay.ReadFloat32(b[16:20]))
	s.Six = float(jay.ReadFloat32(b[20:]))
	return nil
}

func (s *Seven) MarshalJ() (b []byte) {
	b = make([]byte, 28)
	jay.WriteFloat32(b[:4], float32(s.One))
	jay.WriteFloat32(b[4:8], float32(s.Two))
	jay.WriteFloat32(b[8:12], float32(s.Three))
	jay.WriteFloat32(b[12:16], float32(s.Four))
	jay.WriteFloat32(b[16:20], float32(s.Five))
	jay.WriteFloat32(b[20:24], float32(s.Six))
	jay.WriteFloat32(b[24:], float32(s.Seven))
	return
}

func (s *Seven) UnmarshalJ(b []byte) error {
	if len(b) < 28 {
		return jay.ErrUnexpectedEOB
	}
	s.One = float(jay.ReadFloat32(b[:4]))
	s.Two = float(jay.ReadFloat32(b[4:8]))
	s.Three = float(jay.ReadFloat32(b[8:12]))
	s.Four = float(jay.ReadFloat32(b[12:16]))
	s.Five = float(jay.ReadFloat32(b[16:20]))
	s.Six = float(jay.ReadFloat32(b[20:24]))
	s.Seven = float(jay.ReadFloat32(b[24:]))
	return nil
}

func (e *Eight) MarshalJ() (b []byte) {
	b = make([]byte, 32)
	jay.WriteFloat32(b[:4], float32(e.One))
	jay.WriteFloat32(b[4:8], float32(e.Two))
	jay.WriteFloat32(b[8:12], float32(e.Three))
	jay.WriteFloat32(b[12:16], float32(e.Four))
	jay.WriteFloat32(b[16:20], float32(e.Five))
	jay.WriteFloat32(b[20:24], float32(e.Six))
	jay.WriteFloat32(b[24:28], float32(e.Seven))
	jay.WriteFloat32(b[28:], float32(e.Eight))
	return
}

func (e *Eight) UnmarshalJ(b []byte) error {
	if len(b) < 32 {
		return jay.ErrUnexpectedEOB
	}
	e.One = float(jay.ReadFloat32(b[:4]))
	e.Two = float(jay.ReadFloat32(b[4:8]))
	e.Three = float(jay.ReadFloat32(b[8:12]))
	e.Four = float(jay.ReadFloat32(b[12:16]))
	e.Five = float(jay.ReadFloat32(b[16:20]))
	e.Six = float(jay.ReadFloat32(b[20:24]))
	e.Seven = float(jay.ReadFloat32(b[24:28]))
	e.Eight = float(jay.ReadFloat32(b[28:]))
	return nil
}

func (n *Nine) MarshalJ() (b []byte) {
	b = make([]byte, 36)
	jay.WriteFloat32(b[:4], float32(n.One))
	jay.WriteFloat32(b[4:8], float32(n.Two))
	jay.WriteFloat32(b[8:12], float32(n.Three))
	jay.WriteFloat32(b[12:16], float32(n.Four))
	jay.WriteFloat32(b[16:20], float32(n.Five))
	jay.WriteFloat32(b[20:24], float32(n.Six))
	jay.WriteFloat32(b[24:28], float32(n.Seven))
	jay.WriteFloat32(b[28:32], float32(n.Eight))
	jay.WriteFloat32(b[32:], float32(n.Nine))
	return
}

func (n *Nine) UnmarshalJ(b []byte) error {
	if len(b) < 36 {
		return jay.ErrUnexpectedEOB
	}
	n.One = float(jay.ReadFloat32(b[:4]))
	n.Two = float(jay.ReadFloat32(b[4:8]))
	n.Three = float(jay.ReadFloat32(b[8:12]))
	n.Four = float(jay.ReadFloat32(b[12:16]))
	n.Five = float(jay.ReadFloat32(b[16:20]))
	n.Six = float(jay.ReadFloat32(b[20:24]))
	n.Seven = float(jay.ReadFloat32(b[24:28]))
	n.Eight = float(jay.ReadFloat32(b[28:32]))
	n.Nine = float(jay.ReadFloat32(b[32:]))
	return nil
}

func (t *Ten) MarshalJ() (b []byte) {
	b = make([]byte, 40)
	jay.WriteFloat32(b[:4], float32(t.One))
	jay.WriteFloat32(b[4:8], float32(t.Two))
	jay.WriteFloat32(b[8:12], float32(t.Three))
	jay.WriteFloat32(b[12:16], float32(t.Four))
	jay.WriteFloat32(b[16:20], float32(t.Five))
	jay.WriteFloat32(b[20:24], float32(t.Six))
	jay.WriteFloat32(b[24:28], float32(t.Seven))
	jay.WriteFloat32(b[28:32], float32(t.Eight))
	jay.WriteFloat32(b[32:36], float32(t.Nine))
	jay.WriteFloat32(b[36:], float32(t.Ten))
	return
}

func (t *Ten) UnmarshalJ(b []byte) error {
	if len(b) < 40 {
		return jay.ErrUnexpectedEOB
	}
	t.One = float(jay.ReadFloat32(b[:4]))
	t.Two = float(jay.ReadFloat32(b[4:8]))
	t.Three = float(jay.ReadFloat32(b[8:12]))
	t.Four = float(jay.ReadFloat32(b[12:16]))
	t.Five = float(jay.ReadFloat32(b[16:20]))
	t.Six = float(jay.ReadFloat32(b[20:24]))
	t.Seven = float(jay.ReadFloat32(b[24:28]))
	t.Eight = float(jay.ReadFloat32(b[28:32]))
	t.Nine = float(jay.ReadFloat32(b[32:36]))
	t.Ten = float(jay.ReadFloat32(b[36:]))
	return nil
}

func (e *Eleven) MarshalJ() (b []byte) {
	b = make([]byte, 44)
	jay.WriteFloat32(b[:4], float32(e.One))
	jay.WriteFloat32(b[4:8], float32(e.Two))
	jay.WriteFloat32(b[8:12], float32(e.Three))
	jay.WriteFloat32(b[12:16], float32(e.Four))
	jay.WriteFloat32(b[16:20], float32(e.Five))
	jay.WriteFloat32(b[20:24], float32(e.Six))
	jay.WriteFloat32(b[24:28], float32(e.Seven))
	jay.WriteFloat32(b[28:32], float32(e.Eight))
	jay.WriteFloat32(b[32:36], float32(e.Nine))
	jay.WriteFloat32(b[36:40], float32(e.Ten))
	jay.WriteFloat32(b[40:], float32(e.Eleven))
	return
}

func (e *Eleven) UnmarshalJ(b []byte) error {
	if len(b) < 44 {
		return jay.ErrUnexpectedEOB
	}
	e.One = float(jay.ReadFloat32(b[:4]))
	e.Two = float(jay.ReadFloat32(b[4:8]))
	e.Three = float(jay.ReadFloat32(b[8:12]))
	e.Four = float(jay.ReadFloat32(b[12:16]))
	e.Five = float(jay.ReadFloat32(b[16:20]))
	e.Six = float(jay.ReadFloat32(b[20:24]))
	e.Seven = float(jay.ReadFloat32(b[24:28]))
	e.Eight = float(jay.ReadFloat32(b[28:32]))
	e.Nine = float(jay.ReadFloat32(b[32:36]))
	e.Ten = float(jay.ReadFloat32(b[36:40]))
	e.Eleven = float(jay.ReadFloat32(b[40:]))
	return nil
}

func (t *Twelve) MarshalJ() (b []byte) {
	b = make([]byte, 48)
	jay.WriteFloat32(b[:4], float32(t.One))
	jay.WriteFloat32(b[4:8], float32(t.Two))
	jay.WriteFloat32(b[8:12], float32(t.Three))
	jay.WriteFloat32(b[12:16], float32(t.Four))
	jay.WriteFloat32(b[16:20], float32(t.Five))
	jay.WriteFloat32(b[20:24], float32(t.Six))
	jay.WriteFloat32(b[24:28], float32(t.Seven))
	jay.WriteFloat32(b[28:32], float32(t.Eight))
	jay.WriteFloat32(b[32:36], float32(t.Nine))
	jay.WriteFloat32(b[36:40], float32(t.Ten))
	jay.WriteFloat32(b[40:44], float32(t.Eleven))
	jay.WriteFloat32(b[44:], float32(t.Twelve))
	return
}

func (t *Twelve) UnmarshalJ(b []byte) error {
	if len(b) < 48 {
		return jay.ErrUnexpectedEOB
	}
	t.One = float(jay.ReadFloat32(b[:4]))
	t.Two = float(jay.ReadFloat32(b[4:8]))
	t.Three = float(jay.ReadFloat32(b[8:12]))
	t.Four = float(jay.ReadFloat32(b[12:16]))
	t.Five = float(jay.ReadFloat32(b[16:20]))
	t.Six = float(jay.ReadFloat32(b[20:24]))
	t.Seven = float(jay.ReadFloat32(b[24:28]))
	t.Eight = float(jay.ReadFloat32(b[28:32]))
	t.Nine = float(jay.ReadFloat32(b[32:36]))
	t.Ten = float(jay.ReadFloat32(b[36:40]))
	t.Eleven = float(jay.ReadFloat32(b[40:44]))
	t.Twelve = float(jay.ReadFloat32(b[44:]))
	return nil
}

func (t *Thirteen) MarshalJ() (b []byte) {
	b = make([]byte, 52)
	jay.WriteFloat32(b[:4], float32(t.One))
	jay.WriteFloat32(b[4:8], float32(t.Two))
	jay.WriteFloat32(b[8:12], float32(t.Three))
	jay.WriteFloat32(b[12:16], float32(t.Four))
	jay.WriteFloat32(b[16:20], float32(t.Five))
	jay.WriteFloat32(b[20:24], float32(t.Six))
	jay.WriteFloat32(b[24:28], float32(t.Seven))
	jay.WriteFloat32(b[28:32], float32(t.Eight))
	jay.WriteFloat32(b[32:36], float32(t.Nine))
	jay.WriteFloat32(b[36:40], float32(t.Ten))
	jay.WriteFloat32(b[40:44], float32(t.Eleven))
	jay.WriteFloat32(b[44:48], float32(t.Twelve))
	jay.WriteFloat32(b[48:], float32(t.Thirteen))
	return
}

func (t *Thirteen) UnmarshalJ(b []byte) error {
	if len(b) < 52 {
		return jay.ErrUnexpectedEOB
	}
	t.One = float(jay.ReadFloat32(b[:4]))
	t.Two = float(jay.ReadFloat32(b[4:8]))
	t.Three = float(jay.ReadFloat32(b[8:12]))
	t.Four = float(jay.ReadFloat32(b[12:16]))
	t.Five = float(jay.ReadFloat32(b[16:20]))
	t.Six = float(jay.ReadFloat32(b[20:24]))
	t.Seven = float(jay.ReadFloat32(b[24:28]))
	t.Eight = float(jay.ReadFloat32(b[28:32]))
	t.Nine = float(jay.ReadFloat32(b[32:36]))
	t.Ten = float(jay.ReadFloat32(b[36:40]))
	t.Eleven = float(jay.ReadFloat32(b[40:44]))
	t.Twelve = float(jay.ReadFloat32(b[44:48]))
	t.Thirteen = float(jay.ReadFloat32(b[48:]))
	return nil
}

func (f *Fourteen) MarshalJ() (b []byte) {
	b = make([]byte, 56)
	jay.WriteFloat32(b[:4], float32(f.One))
	jay.WriteFloat32(b[4:8], float32(f.Two))
	jay.WriteFloat32(b[8:12], float32(f.Three))
	jay.WriteFloat32(b[12:16], float32(f.Four))
	jay.WriteFloat32(b[16:20], float32(f.Five))
	jay.WriteFloat32(b[20:24], float32(f.Six))
	jay.WriteFloat32(b[24:28], float32(f.Seven))
	jay.WriteFloat32(b[28:32], float32(f.Eight))
	jay.WriteFloat32(b[32:36], float32(f.Nine))
	jay.WriteFloat32(b[36:40], float32(f.Ten))
	jay.WriteFloat32(b[40:44], float32(f.Eleven))
	jay.WriteFloat32(b[44:48], float32(f.Twelve))
	jay.WriteFloat32(b[48:52], float32(f.Thirteen))
	jay.WriteFloat32(b[52:], float32(f.Fourteen))
	return
}

func (f *Fourteen) UnmarshalJ(b []byte) error {
	if len(b) < 56 {
		return jay.ErrUnexpectedEOB
	}
	f.One = float(jay.ReadFloat32(b[:4]))
	f.Two = float(jay.ReadFloat32(b[4:8]))
	f.Three = float(jay.ReadFloat32(b[8:12]))
	f.Four = float(jay.ReadFloat32(b[12:16]))
	f.Five = float(jay.ReadFloat32(b[16:20]))
	f.Six = float(jay.ReadFloat32(b[20:24]))
	f.Seven = float(jay.ReadFloat32(b[24:28]))
	f.Eight = float(jay.ReadFloat32(b[28:32]))
	f.Nine = float(jay.ReadFloat32(b[32:36]))
	f.Ten = float(jay.ReadFloat32(b[36:40]))
	f.Eleven = float(jay.ReadFloat32(b[40:44]))
	f.Twelve = float(jay.ReadFloat32(b[44:48]))
	f.Thirteen = float(jay.ReadFloat32(b[48:52]))
	f.Fourteen = float(jay.ReadFloat32(b[52:]))
	return nil
}

func (f *Fifteen) MarshalJ() (b []byte) {
	b = make([]byte, 60)
	jay.WriteFloat32(b[:4], float32(f.One))
	jay.WriteFloat32(b[4:8], float32(f.Two))
	jay.WriteFloat32(b[8:12], float32(f.Three))
	jay.WriteFloat32(b[12:16], float32(f.Four))
	jay.WriteFloat32(b[16:20], float32(f.Five))
	jay.WriteFloat32(b[20:24], float32(f.Six))
	jay.WriteFloat32(b[24:28], float32(f.Seven))
	jay.WriteFloat32(b[28:32], float32(f.Eight))
	jay.WriteFloat32(b[32:36], float32(f.Nine))
	jay.WriteFloat32(b[36:40], float32(f.Ten))
	jay.WriteFloat32(b[40:44], float32(f.Eleven))
	jay.WriteFloat32(b[44:48], float32(f.Twelve))
	jay.WriteFloat32(b[48:52], float32(f.Thirteen))
	jay.WriteFloat32(b[52:56], float32(f.Fourteen))
	jay.WriteFloat32(b[56:], float32(f.Fifteen))
	return
}

func (f *Fifteen) UnmarshalJ(b []byte) error {
	if len(b) < 60 {
		return jay.ErrUnexpectedEOB
	}
	f.One = float(jay.ReadFloat32(b[:4]))
	f.Two = float(jay.ReadFloat32(b[4:8]))
	f.Three = float(jay.ReadFloat32(b[8:12]))
	f.Four = float(jay.ReadFloat32(b[12:16]))
	f.Five = float(jay.ReadFloat32(b[16:20]))
	f.Six = float(jay.ReadFloat32(b[20:24]))
	f.Seven = float(jay.ReadFloat32(b[24:28]))
	f.Eight = float(jay.ReadFloat32(b[28:32]))
	f.Nine = float(jay.ReadFloat32(b[32:36]))
	f.Ten = float(jay.ReadFloat32(b[36:40]))
	f.Eleven = float(jay.ReadFloat32(b[40:44]))
	f.Twelve = float(jay.ReadFloat32(b[44:48]))
	f.Thirteen = float(jay.ReadFloat32(b[48:52]))
	f.Fourteen = float(jay.ReadFloat32(b[52:56]))
	f.Fifteen = float(jay.ReadFloat32(b[56:]))
	return nil
}

func (s *Sixteen) MarshalJ() (b []byte) {
	b = make([]byte, 64)
	jay.WriteFloat32(b[:4], float32(s.One))
	jay.WriteFloat32(b[4:8], float32(s.Two))
	jay.WriteFloat32(b[8:12], float32(s.Three))
	jay.WriteFloat32(b[12:16], float32(s.Four))
	jay.WriteFloat32(b[16:20], float32(s.Five))
	jay.WriteFloat32(b[20:24], float32(s.Six))
	jay.WriteFloat32(b[24:28], float32(s.Seven))
	jay.WriteFloat32(b[28:32], float32(s.Eight))
	jay.WriteFloat32(b[32:36], float32(s.Nine))
	jay.WriteFloat32(b[36:40], float32(s.Ten))
	jay.WriteFloat32(b[40:44], float32(s.Eleven))
	jay.WriteFloat32(b[44:48], float32(s.Twelve))
	jay.WriteFloat32(b[48:52], float32(s.Thirteen))
	jay.WriteFloat32(b[52:56], float32(s.Fourteen))
	jay.WriteFloat32(b[56:60], float32(s.Fifteen))
	jay.WriteFloat32(b[60:], float32(s.Sixteen))
	return
}

func (s *Sixteen) UnmarshalJ(b []byte) error {
	if len(b) < 64 {
		return jay.ErrUnexpectedEOB
	}
	s.One = float(jay.ReadFloat32(b[:4]))
	s.Two = float(jay.ReadFloat32(b[4:8]))
	s.Three = float(jay.ReadFloat32(b[8:12]))
	s.Four = float(jay.ReadFloat32(b[12:16]))
	s.Five = float(jay.ReadFloat32(b[16:20]))
	s.Six = float(jay.ReadFloat32(b[20:24]))
	s.Seven = float(jay.ReadFloat32(b[24:28]))
	s.Eight = float(jay.ReadFloat32(b[28:32]))
	s.Nine = float(jay.ReadFloat32(b[32:36]))
	s.Ten = float(jay.ReadFloat32(b[36:40]))
	s.Eleven = float(jay.ReadFloat32(b[40:44]))
	s.Twelve = float(jay.ReadFloat32(b[44:48]))
	s.Thirteen = float(jay.ReadFloat32(b[48:52]))
	s.Fourteen = float(jay.ReadFloat32(b[52:56]))
	s.Fifteen = float(jay.ReadFloat32(b[56:60]))
	s.Sixteen = float(jay.ReadFloat32(b[60:]))
	return nil
}

func (s *Seventeen) MarshalJ() (b []byte) {
	b = make([]byte, 68)
	jay.WriteFloat32(b[:4], float32(s.One))
	jay.WriteFloat32(b[4:8], float32(s.Two))
	jay.WriteFloat32(b[8:12], float32(s.Three))
	jay.WriteFloat32(b[12:16], float32(s.Four))
	jay.WriteFloat32(b[16:20], float32(s.Five))
	jay.WriteFloat32(b[20:24], float32(s.Six))
	jay.WriteFloat32(b[24:28], float32(s.Seven))
	jay.WriteFloat32(b[28:32], float32(s.Eight))
	jay.WriteFloat32(b[32:36], float32(s.Nine))
	jay.WriteFloat32(b[36:40], float32(s.Ten))
	jay.WriteFloat32(b[40:44], float32(s.Eleven))
	jay.WriteFloat32(b[44:48], float32(s.Twelve))
	jay.WriteFloat32(b[48:52], float32(s.Thirteen))
	jay.WriteFloat32(b[52:56], float32(s.Fourteen))
	jay.WriteFloat32(b[56:60], float32(s.Fifteen))
	jay.WriteFloat32(b[60:64], float32(s.Sixteen))
	jay.WriteFloat32(b[64:], float32(s.Seventeen))
	return
}

func (s *Seventeen) UnmarshalJ(b []byte) error {
	if len(b) < 68 {
		return jay.ErrUnexpectedEOB
	}
	s.One = float(jay.ReadFloat32(b[:4]))
	s.Two = float(jay.ReadFloat32(b[4:8]))
	s.Three = float(jay.ReadFloat32(b[8:12]))
	s.Four = float(jay.ReadFloat32(b[12:16]))
	s.Five = float(jay.ReadFloat32(b[16:20]))
	s.Six = float(jay.ReadFloat32(b[20:24]))
	s.Seven = float(jay.ReadFloat32(b[24:28]))
	s.Eight = float(jay.ReadFloat32(b[28:32]))
	s.Nine = float(jay.ReadFloat32(b[32:36]))
	s.Ten = float(jay.ReadFloat32(b[36:40]))
	s.Eleven = float(jay.ReadFloat32(b[40:44]))
	s.Twelve = float(jay.ReadFloat32(b[44:48]))
	s.Thirteen = float(jay.ReadFloat32(b[48:52]))
	s.Fourteen = float(jay.ReadFloat32(b[52:56]))
	s.Fifteen = float(jay.ReadFloat32(b[56:60]))
	s.Sixteen = float(jay.ReadFloat32(b[60:64]))
	s.Seventeen = float(jay.ReadFloat32(b[64:]))
	return nil
}

func (e *Eighteen) MarshalJ() (b []byte) {
	b = make([]byte, 72)
	jay.WriteFloat32(b[:4], float32(e.One))
	jay.WriteFloat32(b[4:8], float32(e.Two))
	jay.WriteFloat32(b[8:12], float32(e.Three))
	jay.WriteFloat32(b[12:16], float32(e.Four))
	jay.WriteFloat32(b[16:20], float32(e.Five))
	jay.WriteFloat32(b[20:24], float32(e.Six))
	jay.WriteFloat32(b[24:28], float32(e.Seven))
	jay.WriteFloat32(b[28:32], float32(e.Eight))
	jay.WriteFloat32(b[32:36], float32(e.Nine))
	jay.WriteFloat32(b[36:40], float32(e.Ten))
	jay.WriteFloat32(b[40:44], float32(e.Eleven))
	jay.WriteFloat32(b[44:48], float32(e.Twelve))
	jay.WriteFloat32(b[48:52], float32(e.Thirteen))
	jay.WriteFloat32(b[52:56], float32(e.Fourteen))
	jay.WriteFloat32(b[56:60], float32(e.Fifteen))
	jay.WriteFloat32(b[60:64], float32(e.Sixteen))
	jay.WriteFloat32(b[64:68], float32(e.Seventeen))
	jay.WriteFloat32(b[68:], float32(e.Eighteen))
	return
}

func (e *Eighteen) UnmarshalJ(b []byte) error {
	if len(b) < 72 {
		return jay.ErrUnexpectedEOB
	}
	e.One = float(jay.ReadFloat32(b[:4]))
	e.Two = float(jay.ReadFloat32(b[4:8]))
	e.Three = float(jay.ReadFloat32(b[8:12]))
	e.Four = float(jay.ReadFloat32(b[12:16]))
	e.Five = float(jay.ReadFloat32(b[16:20]))
	e.Six = float(jay.ReadFloat32(b[20:24]))
	e.Seven = float(jay.ReadFloat32(b[24:28]))
	e.Eight = float(jay.ReadFloat32(b[28:32]))
	e.Nine = float(jay.ReadFloat32(b[32:36]))
	e.Ten = float(jay.ReadFloat32(b[36:40]))
	e.Eleven = float(jay.ReadFloat32(b[40:44]))
	e.Twelve = float(jay.ReadFloat32(b[44:48]))
	e.Thirteen = float(jay.ReadFloat32(b[48:52]))
	e.Fourteen = float(jay.ReadFloat32(b[52:56]))
	e.Fifteen = float(jay.ReadFloat32(b[56:60]))
	e.Sixteen = float(jay.ReadFloat32(b[60:64]))
	e.Seventeen = float(jay.ReadFloat32(b[64:68]))
	e.Eighteen = float(jay.ReadFloat32(b[68:]))
	return nil
}

func (n *Nineteen) MarshalJ() (b []byte) {
	b = make([]byte, 76)
	jay.WriteFloat32(b[:4], float32(n.One))
	jay.WriteFloat32(b[4:8], float32(n.Two))
	jay.WriteFloat32(b[8:12], float32(n.Three))
	jay.WriteFloat32(b[12:16], float32(n.Four))
	jay.WriteFloat32(b[16:20], float32(n.Five))
	jay.WriteFloat32(b[20:24], float32(n.Six))
	jay.WriteFloat32(b[24:28], float32(n.Seven))
	jay.WriteFloat32(b[28:32], float32(n.Eight))
	jay.WriteFloat32(b[32:36], float32(n.Nine))
	jay.WriteFloat32(b[36:40], float32(n.Ten))
	jay.WriteFloat32(b[40:44], float32(n.Eleven))
	jay.WriteFloat32(b[44:48], float32(n.Twelve))
	jay.WriteFloat32(b[48:52], float32(n.Thirteen))
	jay.WriteFloat32(b[52:56], float32(n.Fourteen))
	jay.WriteFloat32(b[56:60], float32(n.Fifteen))
	jay.WriteFloat32(b[60:64], float32(n.Sixteen))
	jay.WriteFloat32(b[64:68], float32(n.Seventeen))
	jay.WriteFloat32(b[68:72], float32(n.Eighteen))
	jay.WriteFloat32(b[72:], float32(n.Nineteen))
	return
}

func (n *Nineteen) UnmarshalJ(b []byte) error {
	if len(b) < 76 {
		return jay.ErrUnexpectedEOB
	}
	n.One = float(jay.ReadFloat32(b[:4]))
	n.Two = float(jay.ReadFloat32(b[4:8]))
	n.Three = float(jay.ReadFloat32(b[8:12]))
	n.Four = float(jay.ReadFloat32(b[12:16]))
	n.Five = float(jay.ReadFloat32(b[16:20]))
	n.Six = float(jay.ReadFloat32(b[20:24]))
	n.Seven = float(jay.ReadFloat32(b[24:28]))
	n.Eight = float(jay.ReadFloat32(b[28:32]))
	n.Nine = float(jay.ReadFloat32(b[32:36]))
	n.Ten = float(jay.ReadFloat32(b[36:40]))
	n.Eleven = float(jay.ReadFloat32(b[40:44]))
	n.Twelve = float(jay.ReadFloat32(b[44:48]))
	n.Thirteen = float(jay.ReadFloat32(b[48:52]))
	n.Fourteen = float(jay.ReadFloat32(b[52:56]))
	n.Fifteen = float(jay.ReadFloat32(b[56:60]))
	n.Sixteen = float(jay.ReadFloat32(b[60:64]))
	n.Seventeen = float(jay.ReadFloat32(b[64:68]))
	n.Eighteen = float(jay.ReadFloat32(b[68:72]))
	n.Nineteen = float(jay.ReadFloat32(b[72:]))
	return nil
}

func (t *Twenty) MarshalJ() (b []byte) {
	b = make([]byte, 80)
	jay.WriteFloat32(b[:4], float32(t.One))
	jay.WriteFloat32(b[4:8], float32(t.Two))
	jay.WriteFloat32(b[8:12], float32(t.Three))
	jay.WriteFloat32(b[12:16], float32(t.Four))
	jay.WriteFloat32(b[16:20], float32(t.Five))
	jay.WriteFloat32(b[20:24], float32(t.Six))
	jay.WriteFloat32(b[24:28], float32(t.Seven))
	jay.WriteFloat32(b[28:32], float32(t.Eight))
	jay.WriteFloat32(b[32:36], float32(t.Nine))
	jay.WriteFloat32(b[36:40], float32(t.Ten))
	jay.WriteFloat32(b[40:44], float32(t.Eleven))
	jay.WriteFloat32(b[44:48], float32(t.Twelve))
	jay.WriteFloat32(b[48:52], float32(t.Thirteen))
	jay.WriteFloat32(b[52:56], float32(t.Fourteen))
	jay.WriteFloat32(b[56:60], float32(t.Fifteen))
	jay.WriteFloat32(b[60:64], float32(t.Sixteen))
	jay.WriteFloat32(b[64:68], float32(t.Seventeen))
	jay.WriteFloat32(b[68:72], float32(t.Eighteen))
	jay.WriteFloat32(b[72:76], float32(t.Nineteen))
	jay.WriteFloat32(b[76:], float32(t.Twenty))
	return
}

func (t *Twenty) UnmarshalJ(b []byte) error {
	if len(b) < 80 {
		return jay.ErrUnexpectedEOB
	}
	t.One = float(jay.ReadFloat32(b[:4]))
	t.Two = float(jay.ReadFloat32(b[4:8]))
	t.Three = float(jay.ReadFloat32(b[8:12]))
	t.Four = float(jay.ReadFloat32(b[12:16]))
	t.Five = float(jay.ReadFloat32(b[16:20]))
	t.Six = float(jay.ReadFloat32(b[20:24]))
	t.Seven = float(jay.ReadFloat32(b[24:28]))
	t.Eight = float(jay.ReadFloat32(b[28:32]))
	t.Nine = float(jay.ReadFloat32(b[32:36]))
	t.Ten = float(jay.ReadFloat32(b[36:40]))
	t.Eleven = float(jay.ReadFloat32(b[40:44]))
	t.Twelve = float(jay.ReadFloat32(b[44:48]))
	t.Thirteen = float(jay.ReadFloat32(b[48:52]))
	t.Fourteen = float(jay.ReadFloat32(b[52:56]))
	t.Fifteen = float(jay.ReadFloat32(b[56:60]))
	t.Sixteen = float(jay.ReadFloat32(b[60:64]))
	t.Seventeen = float(jay.ReadFloat32(b[64:68]))
	t.Eighteen = float(jay.ReadFloat32(b[68:72]))
	t.Nineteen = float(jay.ReadFloat32(b[72:76]))
	t.Twenty = float(jay.ReadFloat32(b[76:]))
	return nil
}

func (t *TwentyOne) MarshalJ() (b []byte) {
	b = make([]byte, 84)
	jay.WriteFloat32(b[:4], float32(t.One))
	jay.WriteFloat32(b[4:8], float32(t.Two))
	jay.WriteFloat32(b[8:12], float32(t.Three))
	jay.WriteFloat32(b[12:16], float32(t.Four))
	jay.WriteFloat32(b[16:20], float32(t.Five))
	jay.WriteFloat32(b[20:24], float32(t.Six))
	jay.WriteFloat32(b[24:28], float32(t.Seven))
	jay.WriteFloat32(b[28:32], float32(t.Eight))
	jay.WriteFloat32(b[32:36], float32(t.Nine))
	jay.WriteFloat32(b[36:40], float32(t.Ten))
	jay.WriteFloat32(b[40:44], float32(t.Eleven))
	jay.WriteFloat32(b[44:48], float32(t.Twelve))
	jay.WriteFloat32(b[48:52], float32(t.Thirteen))
	jay.WriteFloat32(b[52:56], float32(t.Fourteen))
	jay.WriteFloat32(b[56:60], float32(t.Fifteen))
	jay.WriteFloat32(b[60:64], float32(t.Sixteen))
	jay.WriteFloat32(b[64:68], float32(t.Seventeen))
	jay.WriteFloat32(b[68:72], float32(t.Eighteen))
	jay.WriteFloat32(b[72:76], float32(t.Nineteen))
	jay.WriteFloat32(b[76:80], float32(t.Twenty))
	jay.WriteFloat32(b[80:], float32(t.TwentyOne))
	return
}

func (t *TwentyOne) UnmarshalJ(b []byte) error {
	if len(b) < 84 {
		return jay.ErrUnexpectedEOB
	}
	t.One = float(jay.ReadFloat32(b[:4]))
	t.Two = float(jay.ReadFloat32(b[4:8]))
	t.Three = float(jay.ReadFloat32(b[8:12]))
	t.Four = float(jay.ReadFloat32(b[12:16]))
	t.Five = float(jay.ReadFloat32(b[16:20]))
	t.Six = float(jay.ReadFloat32(b[20:24]))
	t.Seven = float(jay.ReadFloat32(b[24:28]))
	t.Eight = float(jay.ReadFloat32(b[28:32]))
	t.Nine = float(jay.ReadFloat32(b[32:36]))
	t.Ten = float(jay.ReadFloat32(b[36:40]))
	t.Eleven = float(jay.ReadFloat32(b[40:44]))
	t.Twelve = float(jay.ReadFloat32(b[44:48]))
	t.Thirteen = float(jay.ReadFloat32(b[48:52]))
	t.Fourteen = float(jay.ReadFloat32(b[52:56]))
	t.Fifteen = float(jay.ReadFloat32(b[56:60]))
	t.Sixteen = float(jay.ReadFloat32(b[60:64]))
	t.Seventeen = float(jay.ReadFloat32(b[64:68]))
	t.Eighteen = float(jay.ReadFloat32(b[68:72]))
	t.Nineteen = float(jay.ReadFloat32(b[72:76]))
	t.Twenty = float(jay.ReadFloat32(b[76:80]))
	t.TwentyOne = float(jay.ReadFloat32(b[80:]))
	return nil
}

func (t *TwentyTwo) MarshalJ() (b []byte) {
	b = make([]byte, 88)
	jay.WriteFloat32(b[:4], float32(t.One))
	jay.WriteFloat32(b[4:8], float32(t.Two))
	jay.WriteFloat32(b[8:12], float32(t.Three))
	jay.WriteFloat32(b[12:16], float32(t.Four))
	jay.WriteFloat32(b[16:20], float32(t.Five))
	jay.WriteFloat32(b[20:24], float32(t.Six))
	jay.WriteFloat32(b[24:28], float32(t.Seven))
	jay.WriteFloat32(b[28:32], float32(t.Eight))
	jay.WriteFloat32(b[32:36], float32(t.Nine))
	jay.WriteFloat32(b[36:40], float32(t.Ten))
	jay.WriteFloat32(b[40:44], float32(t.Eleven))
	jay.WriteFloat32(b[44:48], float32(t.Twelve))
	jay.WriteFloat32(b[48:52], float32(t.Thirteen))
	jay.WriteFloat32(b[52:56], float32(t.Fourteen))
	jay.WriteFloat32(b[56:60], float32(t.Fifteen))
	jay.WriteFloat32(b[60:64], float32(t.Sixteen))
	jay.WriteFloat32(b[64:68], float32(t.Seventeen))
	jay.WriteFloat32(b[68:72], float32(t.Eighteen))
	jay.WriteFloat32(b[72:76], float32(t.Nineteen))
	jay.WriteFloat32(b[76:80], float32(t.Twenty))
	jay.WriteFloat32(b[80:84], float32(t.TwentyOne))
	jay.WriteFloat32(b[84:], float32(t.TwentyTwo))
	return
}

func (t *TwentyTwo) UnmarshalJ(b []byte) error {
	if len(b) < 88 {
		return jay.ErrUnexpectedEOB
	}
	t.One = float(jay.ReadFloat32(b[:4]))
	t.Two = float(jay.ReadFloat32(b[4:8]))
	t.Three = float(jay.ReadFloat32(b[8:12]))
	t.Four = float(jay.ReadFloat32(b[12:16]))
	t.Five = float(jay.ReadFloat32(b[16:20]))
	t.Six = float(jay.ReadFloat32(b[20:24]))
	t.Seven = float(jay.ReadFloat32(b[24:28]))
	t.Eight = float(jay.ReadFloat32(b[28:32]))
	t.Nine = float(jay.ReadFloat32(b[32:36]))
	t.Ten = float(jay.ReadFloat32(b[36:40]))
	t.Eleven = float(jay.ReadFloat32(b[40:44]))
	t.Twelve = float(jay.ReadFloat32(b[44:48]))
	t.Thirteen = float(jay.ReadFloat32(b[48:52]))
	t.Fourteen = float(jay.ReadFloat32(b[52:56]))
	t.Fifteen = float(jay.ReadFloat32(b[56:60]))
	t.Sixteen = float(jay.ReadFloat32(b[60:64]))
	t.Seventeen = float(jay.ReadFloat32(b[64:68]))
	t.Eighteen = float(jay.ReadFloat32(b[68:72]))
	t.Nineteen = float(jay.ReadFloat32(b[72:76]))
	t.Twenty = float(jay.ReadFloat32(b[76:80]))
	t.TwentyOne = float(jay.ReadFloat32(b[80:84]))
	t.TwentyTwo = float(jay.ReadFloat32(b[84:]))
	return nil
}

func (t *TwentyThree) MarshalJ() (b []byte) {
	b = make([]byte, 92)
	jay.WriteFloat32(b[:4], float32(t.One))
	jay.WriteFloat32(b[4:8], float32(t.Two))
	jay.WriteFloat32(b[8:12], float32(t.Three))
	jay.WriteFloat32(b[12:16], float32(t.Four))
	jay.WriteFloat32(b[16:20], float32(t.Five))
	jay.WriteFloat32(b[20:24], float32(t.Six))
	jay.WriteFloat32(b[24:28], float32(t.Seven))
	jay.WriteFloat32(b[28:32], float32(t.Eight))
	jay.WriteFloat32(b[32:36], float32(t.Nine))
	jay.WriteFloat32(b[36:40], float32(t.Ten))
	jay.WriteFloat32(b[40:44], float32(t.Eleven))
	jay.WriteFloat32(b[44:48], float32(t.Twelve))
	jay.WriteFloat32(b[48:52], float32(t.Thirteen))
	jay.WriteFloat32(b[52:56], float32(t.Fourteen))
	jay.WriteFloat32(b[56:60], float32(t.Fifteen))
	jay.WriteFloat32(b[60:64], float32(t.Sixteen))
	jay.WriteFloat32(b[64:68], float32(t.Seventeen))
	jay.WriteFloat32(b[68:72], float32(t.Eighteen))
	jay.WriteFloat32(b[72:76], float32(t.Nineteen))
	jay.WriteFloat32(b[76:80], float32(t.Twenty))
	jay.WriteFloat32(b[80:84], float32(t.TwentyOne))
	jay.WriteFloat32(b[84:88], float32(t.TwentyTwo))
	jay.WriteFloat32(b[88:], float32(t.TwentyThree))
	return
}

func (t *TwentyThree) UnmarshalJ(b []byte) error {
	if len(b) < 92 {
		return jay.ErrUnexpectedEOB
	}
	t.One = float(jay.ReadFloat32(b[:4]))
	t.Two = float(jay.ReadFloat32(b[4:8]))
	t.Three = float(jay.ReadFloat32(b[8:12]))
	t.Four = float(jay.ReadFloat32(b[12:16]))
	t.Five = float(jay.ReadFloat32(b[16:20]))
	t.Six = float(jay.ReadFloat32(b[20:24]))
	t.Seven = float(jay.ReadFloat32(b[24:28]))
	t.Eight = float(jay.ReadFloat32(b[28:32]))
	t.Nine = float(jay.ReadFloat32(b[32:36]))
	t.Ten = float(jay.ReadFloat32(b[36:40]))
	t.Eleven = float(jay.ReadFloat32(b[40:44]))
	t.Twelve = float(jay.ReadFloat32(b[44:48]))
	t.Thirteen = float(jay.ReadFloat32(b[48:52]))
	t.Fourteen = float(jay.ReadFloat32(b[52:56]))
	t.Fifteen = float(jay.ReadFloat32(b[56:60]))
	t.Sixteen = float(jay.ReadFloat32(b[60:64]))
	t.Seventeen = float(jay.ReadFloat32(b[64:68]))
	t.Eighteen = float(jay.ReadFloat32(b[68:72]))
	t.Nineteen = float(jay.ReadFloat32(b[72:76]))
	t.Twenty = float(jay.ReadFloat32(b[76:80]))
	t.TwentyOne = float(jay.ReadFloat32(b[80:84]))
	t.TwentyTwo = float(jay.ReadFloat32(b[84:88]))
	t.TwentyThree = float(jay.ReadFloat32(b[88:]))
	return nil
}
