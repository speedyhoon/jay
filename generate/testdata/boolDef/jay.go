// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import "github.com/speedyhoon/jay"

func (o *One) MarshalJ() []byte {
	return []byte{jay.Bool1(bool(o.One))}
}

func (o *One) UnmarshalJ(b []byte) error {
	if len(b) < 1 {
		return jay.ErrUnexpectedEOB
	}
	o.One = b[0] >= 128
	return nil
}

func (t *Two) MarshalJ() []byte {
	return []byte{jay.Bool2(bool(t.One), bool(t.Two))}
}

func (t *Two) UnmarshalJ(b []byte) error {
	if len(b) < 1 {
		return jay.ErrUnexpectedEOB
	}
	t.One, t.Two = b[0] >= 128, b[0]&64 == 64
	return nil
}

func (t *Three) MarshalJ() []byte {
	return []byte{jay.Bool3(bool(t.One), bool(t.Two), bool(t.Three))}
}

func (t *Three) UnmarshalJ(b []byte) error {
	if len(b) < 1 {
		return jay.ErrUnexpectedEOB
	}
	t.One, t.Two, t.Three = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32
	return nil
}

func (f *Four) MarshalJ() []byte {
	return []byte{jay.Bool4(bool(f.One), bool(f.Two), bool(f.Three), bool(f.Four))}
}

func (f *Four) UnmarshalJ(b []byte) error {
	if len(b) < 1 {
		return jay.ErrUnexpectedEOB
	}
	f.One, f.Two, f.Three, f.Four = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16
	return nil
}

func (f *Five) MarshalJ() []byte {
	return []byte{jay.Bool5(bool(f.One), bool(f.Two), bool(f.Three), bool(f.Four), bool(f.Five))}
}

func (f *Five) UnmarshalJ(b []byte) error {
	if len(b) < 1 {
		return jay.ErrUnexpectedEOB
	}
	f.One, f.Two, f.Three, f.Four, f.Five = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8
	return nil
}

func (s *Six) MarshalJ() []byte {
	return []byte{jay.Bool6(bool(s.One), bool(s.Two), bool(s.Three), bool(s.Four), bool(s.Five), bool(s.Six))}
}

func (s *Six) UnmarshalJ(b []byte) error {
	if len(b) < 1 {
		return jay.ErrUnexpectedEOB
	}
	s.One, s.Two, s.Three, s.Four, s.Five, s.Six = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4
	return nil
}

func (s *Seven) MarshalJ() []byte {
	return []byte{jay.Bool7(bool(s.One), bool(s.Two), bool(s.Three), bool(s.Four), bool(s.Five), bool(s.Six), bool(s.Seven))}
}

func (s *Seven) UnmarshalJ(b []byte) error {
	if len(b) < 1 {
		return jay.ErrUnexpectedEOB
	}
	s.One, s.Two, s.Three, s.Four, s.Five, s.Six, s.Seven = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2
	return nil
}

func (e *Eight) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(e.One), bool(e.Two), bool(e.Three), bool(e.Four), bool(e.Five), bool(e.Six), bool(e.Seven), bool(e.Eight))}
}

func (e *Eight) UnmarshalJ(b []byte) error {
	if len(b) < 1 {
		return jay.ErrUnexpectedEOB
	}
	e.One, e.Two, e.Three, e.Four, e.Five, e.Six, e.Seven, e.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	return nil
}

func (n *Nine) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(n.One), bool(n.Two), bool(n.Three), bool(n.Four), bool(n.Five), bool(n.Six), bool(n.Seven), bool(n.Eight)), jay.Bool1(bool(n.Nine))}
}

func (n *Nine) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	n.One, n.Two, n.Three, n.Four, n.Five, n.Six, n.Seven, n.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	n.Nine = b[1] >= 128
	return nil
}

func (t *Ten) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(t.One), bool(t.Two), bool(t.Three), bool(t.Four), bool(t.Five), bool(t.Six), bool(t.Seven), bool(t.Eight)), jay.Bool2(bool(t.Nine), bool(t.Ten))}
}

func (t *Ten) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	t.One, t.Two, t.Three, t.Four, t.Five, t.Six, t.Seven, t.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	t.Nine, t.Ten = b[1] >= 128, b[1]&64 == 64
	return nil
}

func (e *Eleven) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(e.One), bool(e.Two), bool(e.Three), bool(e.Four), bool(e.Five), bool(e.Six), bool(e.Seven), bool(e.Eight)), jay.Bool3(bool(e.Nine), bool(e.Ten), bool(e.Eleven))}
}

func (e *Eleven) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	e.One, e.Two, e.Three, e.Four, e.Five, e.Six, e.Seven, e.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	e.Nine, e.Ten, e.Eleven = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32
	return nil
}

func (t *Twelve) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(t.One), bool(t.Two), bool(t.Three), bool(t.Four), bool(t.Five), bool(t.Six), bool(t.Seven), bool(t.Eight)), jay.Bool4(bool(t.Nine), bool(t.Ten), bool(t.Eleven), bool(t.Twelve))}
}

func (t *Twelve) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	t.One, t.Two, t.Three, t.Four, t.Five, t.Six, t.Seven, t.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	t.Nine, t.Ten, t.Eleven, t.Twelve = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32, b[1]&16 == 16
	return nil
}

func (t *Thirteen) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(t.One), bool(t.Two), bool(t.Three), bool(t.Four), bool(t.Five), bool(t.Six), bool(t.Seven), bool(t.Eight)), jay.Bool5(bool(t.Nine), bool(t.Ten), bool(t.Eleven), bool(t.Twelve), bool(t.Thirteen))}
}

func (t *Thirteen) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	t.One, t.Two, t.Three, t.Four, t.Five, t.Six, t.Seven, t.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	t.Nine, t.Ten, t.Eleven, t.Twelve, t.Thirteen = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32, b[1]&16 == 16, b[1]&8 == 8
	return nil
}

func (f *Fourteen) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(f.One), bool(f.Two), bool(f.Three), bool(f.Four), bool(f.Five), bool(f.Six), bool(f.Seven), bool(f.Eight)), jay.Bool6(bool(f.Nine), bool(f.Ten), bool(f.Eleven), bool(f.Twelve), bool(f.Thirteen), bool(f.Fourteen))}
}

func (f *Fourteen) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One, f.Two, f.Three, f.Four, f.Five, f.Six, f.Seven, f.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	f.Nine, f.Ten, f.Eleven, f.Twelve, f.Thirteen, f.Fourteen = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32, b[1]&16 == 16, b[1]&8 == 8, b[1]&4 == 4
	return nil
}

func (f *Fifteen) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(f.One), bool(f.Two), bool(f.Three), bool(f.Four), bool(f.Five), bool(f.Six), bool(f.Seven), bool(f.Eight)), jay.Bool7(bool(f.Nine), bool(f.Ten), bool(f.Eleven), bool(f.Twelve), bool(f.Thirteen), bool(f.Fourteen), bool(f.Fifteen))}
}

func (f *Fifteen) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	f.One, f.Two, f.Three, f.Four, f.Five, f.Six, f.Seven, f.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	f.Nine, f.Ten, f.Eleven, f.Twelve, f.Thirteen, f.Fourteen, f.Fifteen = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32, b[1]&16 == 16, b[1]&8 == 8, b[1]&4 == 4, b[1]&2 == 2
	return nil
}

func (s *Sixteen) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(s.One), bool(s.Two), bool(s.Three), bool(s.Four), bool(s.Five), bool(s.Six), bool(s.Seven), bool(s.Eight)), jay.Bool8(bool(s.Nine), bool(s.Ten), bool(s.Eleven), bool(s.Twelve), bool(s.Thirteen), bool(s.Fourteen), bool(s.Fifteen), bool(s.Sixteen))}
}

func (s *Sixteen) UnmarshalJ(b []byte) error {
	if len(b) < 2 {
		return jay.ErrUnexpectedEOB
	}
	s.One, s.Two, s.Three, s.Four, s.Five, s.Six, s.Seven, s.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	s.Nine, s.Ten, s.Eleven, s.Twelve, s.Thirteen, s.Fourteen, s.Fifteen, s.Sixteen = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32, b[1]&16 == 16, b[1]&8 == 8, b[1]&4 == 4, b[1]&2 == 2, b[1]&1 == 1
	return nil
}

func (s *Seventeen) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(s.One), bool(s.Two), bool(s.Three), bool(s.Four), bool(s.Five), bool(s.Six), bool(s.Seven), bool(s.Eight)), jay.Bool8(bool(s.Nine), bool(s.Ten), bool(s.Eleven), bool(s.Twelve), bool(s.Thirteen), bool(s.Fourteen), bool(s.Fifteen), bool(s.Sixteen)), jay.Bool1(bool(s.Seventeen))}
}

func (s *Seventeen) UnmarshalJ(b []byte) error {
	if len(b) < 3 {
		return jay.ErrUnexpectedEOB
	}
	s.One, s.Two, s.Three, s.Four, s.Five, s.Six, s.Seven, s.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	s.Nine, s.Ten, s.Eleven, s.Twelve, s.Thirteen, s.Fourteen, s.Fifteen, s.Sixteen = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32, b[1]&16 == 16, b[1]&8 == 8, b[1]&4 == 4, b[1]&2 == 2, b[1]&1 == 1
	s.Seventeen = b[2] >= 128
	return nil
}

func (e *Eighteen) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(e.One), bool(e.Two), bool(e.Three), bool(e.Four), bool(e.Five), bool(e.Six), bool(e.Seven), bool(e.Eight)), jay.Bool8(bool(e.Nine), bool(e.Ten), bool(e.Eleven), bool(e.Twelve), bool(e.Thirteen), bool(e.Fourteen), bool(e.Fifteen), bool(e.Sixteen)), jay.Bool2(bool(e.Seventeen), bool(e.Eighteen))}
}

func (e *Eighteen) UnmarshalJ(b []byte) error {
	if len(b) < 3 {
		return jay.ErrUnexpectedEOB
	}
	e.One, e.Two, e.Three, e.Four, e.Five, e.Six, e.Seven, e.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	e.Nine, e.Ten, e.Eleven, e.Twelve, e.Thirteen, e.Fourteen, e.Fifteen, e.Sixteen = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32, b[1]&16 == 16, b[1]&8 == 8, b[1]&4 == 4, b[1]&2 == 2, b[1]&1 == 1
	e.Seventeen, e.Eighteen = b[2] >= 128, b[2]&64 == 64
	return nil
}

func (n *Nineteen) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(n.One), bool(n.Two), bool(n.Three), bool(n.Four), bool(n.Five), bool(n.Six), bool(n.Seven), bool(n.Eight)), jay.Bool8(bool(n.Nine), bool(n.Ten), bool(n.Eleven), bool(n.Twelve), bool(n.Thirteen), bool(n.Fourteen), bool(n.Fifteen), bool(n.Sixteen)), jay.Bool3(bool(n.Seventeen), bool(n.Eighteen), bool(n.Nineteen))}
}

func (n *Nineteen) UnmarshalJ(b []byte) error {
	if len(b) < 3 {
		return jay.ErrUnexpectedEOB
	}
	n.One, n.Two, n.Three, n.Four, n.Five, n.Six, n.Seven, n.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	n.Nine, n.Ten, n.Eleven, n.Twelve, n.Thirteen, n.Fourteen, n.Fifteen, n.Sixteen = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32, b[1]&16 == 16, b[1]&8 == 8, b[1]&4 == 4, b[1]&2 == 2, b[1]&1 == 1
	n.Seventeen, n.Eighteen, n.Nineteen = b[2] >= 128, b[2]&64 == 64, b[2]&32 == 32
	return nil
}

func (t *Twenty) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(t.One), bool(t.Two), bool(t.Three), bool(t.Four), bool(t.Five), bool(t.Six), bool(t.Seven), bool(t.Eight)), jay.Bool8(bool(t.Nine), bool(t.Ten), bool(t.Eleven), bool(t.Twelve), bool(t.Thirteen), bool(t.Fourteen), bool(t.Fifteen), bool(t.Sixteen)), jay.Bool4(bool(t.Seventeen), bool(t.Eighteen), bool(t.Nineteen), bool(t.Twenty))}
}

func (t *Twenty) UnmarshalJ(b []byte) error {
	if len(b) < 3 {
		return jay.ErrUnexpectedEOB
	}
	t.One, t.Two, t.Three, t.Four, t.Five, t.Six, t.Seven, t.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	t.Nine, t.Ten, t.Eleven, t.Twelve, t.Thirteen, t.Fourteen, t.Fifteen, t.Sixteen = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32, b[1]&16 == 16, b[1]&8 == 8, b[1]&4 == 4, b[1]&2 == 2, b[1]&1 == 1
	t.Seventeen, t.Eighteen, t.Nineteen, t.Twenty = b[2] >= 128, b[2]&64 == 64, b[2]&32 == 32, b[2]&16 == 16
	return nil
}

func (t *TwentyOne) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(t.One), bool(t.Two), bool(t.Three), bool(t.Four), bool(t.Five), bool(t.Six), bool(t.Seven), bool(t.Eight)), jay.Bool8(bool(t.Nine), bool(t.Ten), bool(t.Eleven), bool(t.Twelve), bool(t.Thirteen), bool(t.Fourteen), bool(t.Fifteen), bool(t.Sixteen)), jay.Bool5(bool(t.Seventeen), bool(t.Eighteen), bool(t.Nineteen), bool(t.Twenty), bool(t.TwentyOne))}
}

func (t *TwentyOne) UnmarshalJ(b []byte) error {
	if len(b) < 3 {
		return jay.ErrUnexpectedEOB
	}
	t.One, t.Two, t.Three, t.Four, t.Five, t.Six, t.Seven, t.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	t.Nine, t.Ten, t.Eleven, t.Twelve, t.Thirteen, t.Fourteen, t.Fifteen, t.Sixteen = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32, b[1]&16 == 16, b[1]&8 == 8, b[1]&4 == 4, b[1]&2 == 2, b[1]&1 == 1
	t.Seventeen, t.Eighteen, t.Nineteen, t.Twenty, t.TwentyOne = b[2] >= 128, b[2]&64 == 64, b[2]&32 == 32, b[2]&16 == 16, b[2]&8 == 8
	return nil
}

func (t *TwentyTwo) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(t.One), bool(t.Two), bool(t.Three), bool(t.Four), bool(t.Five), bool(t.Six), bool(t.Seven), bool(t.Eight)), jay.Bool8(bool(t.Nine), bool(t.Ten), bool(t.Eleven), bool(t.Twelve), bool(t.Thirteen), bool(t.Fourteen), bool(t.Fifteen), bool(t.Sixteen)), jay.Bool6(bool(t.Seventeen), bool(t.Eighteen), bool(t.Nineteen), bool(t.Twenty), bool(t.TwentyOne), bool(t.TwentyTwo))}
}

func (t *TwentyTwo) UnmarshalJ(b []byte) error {
	if len(b) < 3 {
		return jay.ErrUnexpectedEOB
	}
	t.One, t.Two, t.Three, t.Four, t.Five, t.Six, t.Seven, t.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	t.Nine, t.Ten, t.Eleven, t.Twelve, t.Thirteen, t.Fourteen, t.Fifteen, t.Sixteen = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32, b[1]&16 == 16, b[1]&8 == 8, b[1]&4 == 4, b[1]&2 == 2, b[1]&1 == 1
	t.Seventeen, t.Eighteen, t.Nineteen, t.Twenty, t.TwentyOne, t.TwentyTwo = b[2] >= 128, b[2]&64 == 64, b[2]&32 == 32, b[2]&16 == 16, b[2]&8 == 8, b[2]&4 == 4
	return nil
}

func (t *TwentyThree) MarshalJ() []byte {
	return []byte{jay.Bool8(bool(t.One), bool(t.Two), bool(t.Three), bool(t.Four), bool(t.Five), bool(t.Six), bool(t.Seven), bool(t.Eight)), jay.Bool8(bool(t.Nine), bool(t.Ten), bool(t.Eleven), bool(t.Twelve), bool(t.Thirteen), bool(t.Fourteen), bool(t.Fifteen), bool(t.Sixteen)), jay.Bool7(bool(t.Seventeen), bool(t.Eighteen), bool(t.Nineteen), bool(t.Twenty), bool(t.TwentyOne), bool(t.TwentyTwo), bool(t.TwentyThree))}
}

func (t *TwentyThree) UnmarshalJ(b []byte) error {
	if len(b) < 3 {
		return jay.ErrUnexpectedEOB
	}
	t.One, t.Two, t.Three, t.Four, t.Five, t.Six, t.Seven, t.Eight = b[0] >= 128, b[0]&64 == 64, b[0]&32 == 32, b[0]&16 == 16, b[0]&8 == 8, b[0]&4 == 4, b[0]&2 == 2, b[0]&1 == 1
	t.Nine, t.Ten, t.Eleven, t.Twelve, t.Thirteen, t.Fourteen, t.Fifteen, t.Sixteen = b[1] >= 128, b[1]&64 == 64, b[1]&32 == 32, b[1]&16 == 16, b[1]&8 == 8, b[1]&4 == 4, b[1]&2 == 2, b[1]&1 == 1
	t.Seventeen, t.Eighteen, t.Nineteen, t.Twenty, t.TwentyOne, t.TwentyTwo, t.TwentyThree = b[2] >= 128, b[2]&64 == 64, b[2]&32 == 32, b[2]&16 == 16, b[2]&8 == 8, b[2]&4 == 4, b[2]&2 == 2
	return nil
}
