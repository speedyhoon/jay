package generate_test

import (
	"github.com/speedyhoon/jay/generate"
	"github.com/stretchr/testify/assert"
	"testing"
)

// test receiver name (b *Boat) doesn't collide with return parameter (y []byte).
func Test_ReceiverNameNoCollisionB(t *testing.T) {
	input := []byte(`package main

type Boat struct {
	Price float32
	Discount int
}`)
	expected := `// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import "github.com/speedyhoon/jay"

func (b Boat) MarshalJ() (y []byte) {
	y = make([]byte, 12)
	jay.WriteFloat32(y[:4], b.Price)
	jay.WriteIntX64(y[4:], b.Discount)
	return
}

func (b *Boat) UnmarshalJ(y []byte) error {
	if len(y) < 12 {
		return jay.ErrUnexpectedEOB
	}
	b.Price = jay.ReadFloat32(y[:4])
	b.Discount = jay.ReadIntX64(y[4:])
	return nil
}
`

	opt := generate.Option{FixedIntSize: true, FixedUintSize: true}
	src, err := opt.ProcessFiles(input)
	assert.NoError(t, err)
	assert.Len(t, src, 1)
	assert.Equal(t, expected, string(src[0].Src))
	assert.Contains(t, string(src[0].Src), "func (b Boat) MarshalJ() (y []byte) {")
	assert.Contains(t, string(src[0].Src), "func (b *Boat) UnmarshalJ(y []byte) error {")
}

// test receiver name (c *Car) doesn't collide with default return parameter (b []byte).
func Test_ReceiverNameNoCollisionC(t *testing.T) {
	input := []byte(`package main

type Car struct {
	Price float32
	Discount int
}`)
	expected := `// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import "github.com/speedyhoon/jay"

func (c Car) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat32(b[:4], c.Price)
	jay.WriteIntX64(b[4:], c.Discount)
	return
}

func (c *Car) UnmarshalJ(b []byte) error {
	if len(b) < 12 {
		return jay.ErrUnexpectedEOB
	}
	c.Price = jay.ReadFloat32(b[:4])
	c.Discount = jay.ReadIntX64(b[4:])
	return nil
}
`

	opt := generate.Option{FixedIntSize: true, FixedUintSize: true}
	src, err := opt.ProcessFiles(input)
	assert.NoError(t, err)
	assert.Len(t, src, 1)
	assert.Equal(t, expected, string(src[0].Src))
	assert.Contains(t, string(src[0].Src), "func (c Car) MarshalJ() (b []byte) {")
	assert.Contains(t, string(src[0].Src), "func (c *Car) UnmarshalJ(b []byte) error {")
}

// test receiver name (y *Yacht) doesn't collide with default return parameter (b []byte).
func Test_ReceiverNameNoCollisionY(t *testing.T) {
	input := []byte(`package main

type Yacht struct {
	Price float32
	Discount int
}`)
	expected := `// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import "github.com/speedyhoon/jay"

func (y Yacht) MarshalJ() (b []byte) {
	b = make([]byte, 12)
	jay.WriteFloat32(b[:4], y.Price)
	jay.WriteIntX64(b[4:], y.Discount)
	return
}

func (y *Yacht) UnmarshalJ(b []byte) error {
	if len(b) < 12 {
		return jay.ErrUnexpectedEOB
	}
	y.Price = jay.ReadFloat32(b[:4])
	y.Discount = jay.ReadIntX64(b[4:])
	return nil
}
`

	opt := generate.Option{FixedIntSize: true, FixedUintSize: true}
	src, err := opt.ProcessFiles(input)
	assert.NoError(t, err)
	assert.Len(t, src, 1)
	assert.Equal(t, expected, string(src[0].Src))
	assert.Contains(t, string(src[0].Src), "func (y Yacht) MarshalJ() (b []byte) {")
	assert.Contains(t, string(src[0].Src), "func (y *Yacht) UnmarshalJ(b []byte) error {")
}
