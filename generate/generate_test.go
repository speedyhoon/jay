package generate

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestNoFiles(t *testing.T) {
	opt := Option{FixedIntSize: true, FixedUintSize: true}
	src, err := opt.ProcessFiles(nil)
	assert.ErrorIs(t, err, ErrNoSource, src)
}

func TestEmptyPackage(t *testing.T) {
	pkg := []byte("package main\n")
	opt := Option{FixedIntSize: true, FixedUintSize: true}
	src, err := opt.ProcessFiles(pkg)
	assert.ErrorIs(t, err, ErrNoneExported, src)
}

func TestNoPublicStructs(t *testing.T) {
	pkg := []byte(`package main
type cow struct {
	Height float32
}
`)
	opt := Option{FixedIntSize: true, FixedUintSize: true}
	src, err := opt.ProcessFiles(pkg)
	assert.ErrorIs(t, err, ErrNoneExported, src)
}

func TestNoExportedFields(t *testing.T) {
	pkg := []byte(`package main
type Cow struct {
	height float32
}
`)
	opt := Option{FixedIntSize: true, FixedUintSize: true}
	src, err := opt.ProcessFiles(pkg)
	assert.ErrorIs(t, err, ErrNoneExported, src)
}

func TestOK(t *testing.T) {
	pkg := []byte(`package main
type Cow struct {
	Height float32
}
`)
	opt := Option{FixedIntSize: true, FixedUintSize: true}
	src, err := opt.ProcessFiles(pkg)
	assert.NoError(t, err)
	want := `// Code generated by Jay; DO NOT EDIT. Tool documentation available at: https://github.com/speedyhoon/jay

package main

import "github.com/speedyhoon/jay"

func (c *Cow) MarshalJ() (b []byte) {
	b = make([]byte, 4)
	jay.WriteFloat32(b[:4], c.Height)
	return
}

func (c *Cow) UnmarshalJ(b []byte) error {
	if len(b) < 4 {
		return jay.ErrUnexpectedEOB
	}
	c.Height = jay.ReadFloat32(b[:4])
	return nil
}
`
	assert.Len(t, src, 1)
	assert.Equal(t, want, string(src[0].Src))
}
