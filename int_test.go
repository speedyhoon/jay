package jay

import (
	"github.com/stretchr/testify/assert"
	"math"
	"testing"
)

func TestWriteInt32(t *testing.T) {
	b := make([]byte, 5)
	WriteInt32(b, MinInt32)
	assert.Equal(t, []byte{0, 0, 0, 128, 0}, b)
	WriteInt32(b, MinInt24)
	assert.Equal(t, []byte{0, 0, 128, 255, 0}, b)
	WriteInt32(b, MinInt16)
	assert.Equal(t, []byte{0, 128, 255, 255, 0}, b)
	WriteInt32(b, MinInt8)
	assert.Equal(t, []byte{128, 255, 255, 255, 0}, b)
	WriteInt32(b, 0)
	assert.Equal(t, []byte{0, 0, 0, 0, 0}, b)
	WriteInt32(b, MaxInt8)
	assert.Equal(t, []byte{127, 0, 0, 0, 0}, b)
	WriteInt32(b, MaxUint8)
	assert.Equal(t, []byte{255, 0, 0, 0, 0}, b)
	WriteInt32(b, MaxInt16)
	assert.Equal(t, []byte{255, 127, 0, 0, 0}, b)
	WriteInt32(b, MaxUint16)
	assert.Equal(t, []byte{255, 255, 0, 0, 0}, b)
	WriteInt32(b, MaxInt24)
	assert.Equal(t, []byte{255, 255, 127, 0, 0}, b)
	WriteInt32(b, MaxUint24)
	assert.Equal(t, []byte{255, 255, 255, 0, 0}, b)
	WriteInt32(b, MaxInt32)
	assert.Equal(t, []byte{255, 255, 255, 127, 0}, b)
}

func TestWriteInt16(t *testing.T) {
	b := make([]byte, 3)

	//sm := int8(-128)
	//b[0] = byte(sm)
	//assert.Equal(t, []byte{128, 0, 0}, b)

	WriteInt16(b, MinInt16)
	assert.Equal(t, []byte{0, 128, 0}, b)
	WriteInt16(b, MinInt8)
	assert.Equal(t, []byte{128, 255, 0}, b)
	WriteInt16(b, 0)
	assert.Equal(t, []byte{0, 0, 0}, b)
	WriteInt16(b, MaxInt8)
	assert.Equal(t, []byte{127, 0, 0}, b)
	WriteInt16(b, MaxUint8)
	assert.Equal(t, []byte{255, 0, 0}, b)
	WriteInt16(b, MaxInt16)
	assert.Equal(t, []byte{255, 127, 0}, b)
}

func TestWriteInt64(t *testing.T) {
	b := make([]byte, 8)
	WriteInt64(b, MinInt56)
	assert.Equal(t, []byte{0, 0, 0, 0, 0, 0, 128, 255}, b)
	WriteInt64(b, MinInt48)
	assert.Equal(t, []byte{0, 0, 0, 0, 0, 128, 255, 255}, b)
	WriteInt64(b, MinInt40)
	assert.Equal(t, []byte{0, 0, 0, 0, 128, 255, 255, 255}, b)
	WriteInt64(b, MinInt32)
	assert.Equal(t, []byte{0, 0, 0, 128, 255, 255, 255, 255}, b)
	WriteInt64(b, MinInt24)
	assert.Equal(t, []byte{0, 0, 128, 255, 255, 255, 255, 255}, b)
	WriteInt64(b, MinInt16)
	assert.Equal(t, []byte{0, 128, 255, 255, 255, 255, 255, 255}, b)
	WriteInt64(b, MinInt8)
	assert.Equal(t, []byte{128, 255, 255, 255, 255, 255, 255, 255}, b)
	WriteInt64(b, 0)
	assert.Equal(t, []byte{0, 0, 0, 0, 0, 0, 0, 0}, b)
	WriteInt64(b, MaxInt8)
	assert.Equal(t, []byte{127, 0, 0, 0, 0, 0, 0, 0}, b)
	WriteInt64(b, MaxUint8)
	assert.Equal(t, []byte{255, 0, 0, 0, 0, 0, 0, 0}, b)
	WriteInt64(b, MaxInt16)
	assert.Equal(t, []byte{255, 127, 0, 0, 0, 0, 0, 0}, b)
	WriteInt64(b, MaxUint16)
	assert.Equal(t, []byte{255, 255, 0, 0, 0, 0, 0, 0}, b)
	WriteInt64(b, MaxInt24)
	assert.Equal(t, []byte{255, 255, 127, 0, 0, 0, 0, 0}, b)
	WriteInt64(b, MaxUint24)
	assert.Equal(t, []byte{255, 255, 255, 0, 0, 0, 0, 0}, b)
	WriteInt64(b, MaxInt32)
	assert.Equal(t, []byte{255, 255, 255, 127, 0, 0, 0, 0}, b)
	WriteInt64(b, MaxUint32)
	assert.Equal(t, []byte{255, 255, 255, 255, 0, 0, 0, 0}, b)
	WriteInt64(b, MaxInt40)
	assert.Equal(t, []byte{255, 255, 255, 255, 127, 0, 0, 0}, b)
	WriteInt64(b, MaxUint40)
	assert.Equal(t, []byte{255, 255, 255, 255, 255, 0, 0, 0}, b)
	WriteInt64(b, MaxInt48)
	assert.Equal(t, []byte{255, 255, 255, 255, 255, 127, 0, 0}, b)
	WriteInt64(b, MaxUint48)
	assert.Equal(t, []byte{255, 255, 255, 255, 255, 255, 0, 0}, b)
	WriteInt64(b, MaxInt56)
	assert.Equal(t, []byte{255, 255, 255, 255, 255, 255, 127, 0}, b)
	WriteInt64(b, math.MaxInt64)
	assert.Equal(t, []byte{255, 255, 255, 255, 255, 255, 255, 127}, b)
}

/*func TestWriteInt2222(t *testing.T) {
	b := make([]byte, 8)

	maxList := []int{0, MaxInt8, MaxInt16, MaxInt24, MaxInt32, MaxInt40, MaxInt48, MaxInt56}
	minList := []int{0, MinInt8, MinInt16, MinInt24, MinInt32, MinInt40, MinInt48, MinInt56}
	for n := range maxList {
		WriteInt(b, maxList[n], LenInt(maxList[n]))
		i, l := ReadInt(b)
		assert.Equal(t, maxList[n], i)
		assert.Equal(t, n, l)

		WriteInt(b, minList[n], LenInt(minList[n]))
		i, l = ReadInt(b)
		assert.Equal(t, minList[n], i)
		assert.Equal(t, n, l)
	}
}*/

/*func TestWriteInt(t *testing.T) {
	b := make([]byte, 8)
	WriteInt(b, MinInt56, LenInt(MinInt56))
	assert.Equal(t, []byte{0, 0, 0, 0, 0, 0, 128, 255}, b)
	WriteInt(b, MinInt48, LenInt(MinInt48))
	assert.Equal(t, []byte{0, 0, 0, 0, 0, 128, 255, 255}, b)
	WriteInt(b, MinInt40, LenInt(MinInt40))
	assert.Equal(t, []byte{0, 0, 0, 0, 128, 255, 255, 255}, b)
	WriteInt(b, MinInt32, LenInt(MinInt32))
	assert.Equal(t, []byte{0, 0, 0, 128, 255, 255, 255, 255}, b)
	WriteInt(b, MinInt24, LenInt(MinInt24))
	assert.Equal(t, []byte{0, 0, 128, 255, 255, 255, 255, 255}, b)
	WriteInt(b, MinInt16, LenInt(MinInt16))
	assert.Equal(t, []byte{0, 128, 255, 255, 255, 255, 255, 255}, b)
	WriteInt(b, MinInt8, LenInt(MinInt8))
	assert.Equal(t, []byte{128, 255, 255, 255, 255, 255, 255, 255}, b)
	WriteInt(b, 0, LenInt(0))
	assert.Equal(t, []byte{0, 0, 0, 0, 0, 0, 0, 0}, b)
	WriteInt(b, MaxInt8, LenInt(MaxInt8))
	assert.Equal(t, []byte{127, 0, 0, 0, 0, 0, 0, 0}, b)
	WriteInt(b, MaxUint8, LenInt(MaxUint8))
	assert.Equal(t, []byte{255, 0, 0, 0, 0, 0, 0, 0}, b)
	WriteInt(b, MaxInt16, LenInt(MaxInt16))
	assert.Equal(t, []byte{255, 127, 0, 0, 0, 0, 0, 0}, b)
	WriteInt(b, MaxUint16, LenInt(MaxUint16))
	assert.Equal(t, []byte{255, 255, 0, 0, 0, 0, 0, 0}, b)
	WriteInt(b, MaxInt24, LenInt(MaxInt24))
	assert.Equal(t, []byte{255, 255, 127, 0, 0, 0, 0, 0}, b)
	WriteInt(b, MaxUint24, LenInt(MaxUint24))
	assert.Equal(t, []byte{255, 255, 255, 0, 0, 0, 0, 0}, b)
	WriteInt(b, MaxInt32, LenInt(MaxInt32))
	assert.Equal(t, []byte{255, 255, 255, 127, 0, 0, 0, 0}, b)
	WriteInt(b, MaxUint32, LenInt(MaxUint32))
	assert.Equal(t, []byte{255, 255, 255, 255, 0, 0, 0, 0}, b)
	WriteInt(b, MaxInt40, LenInt(MaxInt40))
	assert.Equal(t, []byte{255, 255, 255, 255, 127, 0, 0, 0}, b)
	WriteInt(b, MaxUint40, LenInt(MaxUint40))
	assert.Equal(t, []byte{255, 255, 255, 255, 255, 0, 0, 0}, b)
	WriteInt(b, MaxInt48, LenInt(MaxInt48))
	assert.Equal(t, []byte{255, 255, 255, 255, 255, 127, 0, 0}, b)
	WriteInt(b, MaxUint48, LenInt(MaxUint48))
	assert.Equal(t, []byte{255, 255, 255, 255, 255, 255, 0, 0}, b)
	WriteInt(b, MaxInt56, LenInt(MaxInt56))
	assert.Equal(t, []byte{255, 255, 255, 255, 255, 255, 127, 0}, b)
	WriteInt(b, math.MaxInt64, LenInt(math.MaxInt64))
	assert.Equal(t, []byte{255, 255, 255, 255, 255, 255, 255, 127}, b)
}*/
